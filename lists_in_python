# Lists: A list is  a container data type that stores a sequence of elements. Unlike strings, lists are mutable(
# modification possible)

# creating a new list. Note that lists are created with square braces

l = [1, 2, 3]

# Adding Elements to a list can be done in three ways. 1. using Append 2. Using insert 3. using concatenation .
# The append method is the fastest

# using the append
l.append(4)
print("Update list using append: ", l)

# using the insert
# Takes two input arguments. The first is the position to be inserted and the second is the value to be inserted.
l.insert(2, 1)
print("update list using insert:", l)

# using the concatenate
print("List addition using concatenation:", [1, 2, 3] + [4])

# Removal
# syntax
# list.remove(element). Takes in a single argument which is the element to remove from the list.
l.remove(1)
print("updated list:", l)

# Reversing
# syntax
# list.reverse(). Takes no input argument
l.reverse()
print("Updated reverse list:", l)

# sorting
# syntax
# list.sort() . Takes no input
l.sort()
print("Updated and sorted list:", l)

# Indexing
# Finds the first occurence of the element in the list and returns its index.
# Syntax
# list.index(element, optional(position to look after))
l.index(2)
print("updated list using the index:", l)

# LISTS COMPREHENSION
# Example One
nums = [1, 2, 3, 4, 5, 6, 8, 9, 7]
my_list = []
for n in nums:
    my_list.append(n)
print(my_list)

# List comprehension for example one
my_list = [n for n in nums]
print(my_list)

# Using the lambda function
my_list = list(map(lambda n: n, nums))
print(my_list)

# Example 2 : Finding the even numbers in a list
even_list = []
for n in nums:
    if n % 2 == 0:
        even_list.append(n)
print(even_list)

# List comprehension for example 2
even_list = [n for n in nums if n % 2 == 0]
print(even_list)

# using the lambda function and filter() method
even_list = list(filter(lambda n: (n % 2 == 0), nums))
print(even_list)

# Example 3 : Permutations and combinations of letters and numbers
my_pairs = []
for letter in 'abcd':
    for num in range(4):
        my_pairs.append((letter, num))
print(my_pairs)
# List comprehension of example 3
my_pairs = [(letter, num) for letter in 'abcd' for num in range(4)]
print(my_pairs)

freight_forwarders = [['Mensa', 'Accra'], ['Joshua', 'Accra'], ['Evans', 'Tema'], ['Abena', 'Tema'], ['Tracy', 'Tema']]

new_list= [l[0:3] for l in freight_forwarders if l[1]=='Accra']
print(new_list)


# Using Lists as stack. Generally speaking a stack can be pictured as placing items on top of each other vertically
# Thus, it applies that, the last element to be added to the stack would be the first to be removed.
# A stack operates on last-in first out (LIFO)

my_list.pop()
print(my_list)

from collections import  deque
name_list = deque(['Asiak', 'Awontiirim', 'Nathaniel', 'Faustina', 'Angela', 'Roseline', 'Samuel'])
name_list.popleft()
print(name_list)

